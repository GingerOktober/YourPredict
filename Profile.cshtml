@model App.Models.ComboModelProfileANDGoodsCard
@{
    ViewBag.Title = "Профиль пользователя";
    Layout = "/Views/Shared/_Layout.cshtml";
}
<!DOCTYPE html>
<html>
<head>
    <title>Мой профиль</title>
    <style>
        /* Ваш стиль CSS для внешнего оформления */
        .profile-container {
            max-width: 800px;
            margin: 100px auto;
            padding: 40px;
            font-family: Arial, sans-serif;
            background-color: #fff;
            border-radius: 20px;
        }

        .profile-header {
            display: flex;
            align-items: center;
            margin-bottom: 20px;
        }

            .profile-image {
                width: 100px;
                height: 100px;
                border-radius: 50%;
                margin-right: 20px;
            }

            .profile-header h2 {
                margin: 0;
            }

            .profile-header p {
                margin: 5px 0;
            }


        .profile-nav {
            display: flex;
        }

            .profile-nav a {
                text-decoration: none;
                color: #333;
                margin-right: 20px;
            }

        .active-tab {
            font-weight: bold;
        }

        .tab-content {
            display: none;
        }

            .tab-content.active {
                display: block;
            }

        .description {
            margin-top: 20px;
            padding: 10px;
            border: 1px solid #ccc;
        }

        .edit-description {
            display: none;
            width: 100%;
            border: 1px solid #ccc;
            padding: 5px;

        }

        .order {
            border: 1px solid #ccc;
            margin-bottom: 20px;
            padding: 10px;
            border-radius: 5px;
        }

            .order h4 {
                font-size: 18px;
                margin-bottom: 10px;
            }

            .order p {
                font-size: 16px;
                margin: 5px 0;
            }

            .order ul {
                list-style-type: none;
                padding: 0;
            }

            .order li {
                margin: 5px 0;
            }

                .order li:nth-child(odd) {
                    background-color: #f5f5f5;
                }

            .order h5 {
                font-size: 16px;
                margin-top: 10px;
            }

                .order h5::before {
                    content: "\2022"; /* Добавляем круглую маркер-буллет перед заголовком */
                    margin-right: 10px;
                    font-size: 20px;
                    color: rebeccapurple; /* Цвет маркера */
                }

        #my-comments {
            margin-top: 20px;
            border: 1px solid #ccc;
            padding: 10px;
            background-color: #f9f9f9;
        }

            #my-comments h3 {
                font-size: 20px;
                margin-bottom: 10px;
            }

            #my-comments ul {
                list-style-type: none;
                padding: 0;
            }

            #my-comments li {
                margin-bottom: 20px;
                padding: 10px;
                border: 1px solid #ddd;
                background-color: #fff;
            }

                #my-comments li strong {
                    font-weight: bold;
                }

            #my-comments p {
                margin: 5px 0;
            }

        button {
            background-color: mediumpurple;
            color: white;
            padding: 10px 20px;
            border: none;
            margin: 10px;
            border-radius: 5px;
            cursor: pointer;
        }
        #DeleteAccountButton,
        #LogoutButton {
            background-color: rebeccapurple;
        }

            #DeleteAccountButton:hover,
            #LogoutButton:hover {
                background-color: blueviolet;
            }

        .button-container {
            display: flex;
            gap: 10px; /* Пространство между кнопками */
        }
    </style>
</head>
<body>
    <div class="profile-container">
        @foreach (var item in Model.UsersData)
        {
            if (item.UserId == Model.UserId)
            {
                <div class="profile-header">
                        <img class="profile-image" img src=@item.image_link alt="Ваше имя">
                    <div>
                        <h2>@item.Name</h2>
                        <p>@item.Email</p>
                        <p>Дата рождения: @item.BirthDate.ToShortDateString()</p>
                    </div>
                </div>

                <div class="profile-nav">
                    <a href="#" class="active-tab" data-tab="about-me">Обо мне</a>
                    <a href="#" data-tab="my-orders">Мои заказы</a>
                    <a href="#" data-tab="my-comments">Мои комментарии</a>
                </div>

                <div id="about-me" class="tab-content active">

                    <h3>Обо мне</h3>
                    <p>Стихия: @item.Element</p>
                    <p>Знак зодиака: @item.Zodiac</p>
                        <p>Тотемное животное: @item.TotemAnimal</p>
                    <p>Китайский гороскоп: @item.ChinaAnimal</p>
                    <p>Драгоценный камень: @item.Gem</p>
                    <p>Дерерво: @item.Tree</p>
                    <p>Цветок: @item.Flower</p>
                    <p>Планета: @item.Planet</p>
                        <p>Счастливое число пути: @item.LuckyNumberPath</p>
                        <p>Число рождения: @item.LuckyNumberBirthDay</p>

                    <div class="description">
                        <h3>Описание</h3>
                        <p id="description-text">@item.About</p>
                        <button id="edit-description-button">Редактировать</button>
                        <form class="edit-description-form" action="/Home/UpdateDescription" method="POST">
                            <textarea id="edit-description" name="updatedDescription" class="edit-description"></textarea>
                            <button id="save-description-button" style="display: none;">Сохранить</button>
                        </form>
                    </div>
                    <div class="button-container">
                    <form action="/Home/Logoff" target="_blank">
                        <button id="LogoutButton">Выйти из системы</button>
                    </form>
                    <form action="/Home/RemoveUser" target="_blank">
                        <button id="DeleteAccountButton">Удалить аккаунт</button>
                        </form>
                    </div>
                </div>
                }
                }
        <div id="my-orders" class="tab-content">
            @foreach (var group in Model.OrdersData.Where(g => g.UserId == Model.UserId).GroupBy(g => g.OrderDate))
            {
                var currentOrderDate = group.Key; // Дата создания текущей группы товаров

                <div class="order">
                    <h4>Заказ номер: @group.FirstOrDefault().OrderId</h4>
                    <p>Дата заказа: @currentOrderDate.ToShortDateString().</p>
                    <p>Статус заказа: Заказ собирается.</p>
                    <p>Адрес доставки: zzz</p>
                    <p>Номер телефона: zzz</p>
                    <p>Способ оплаты: Оплата картой.</p>
                    <h5>Товары в заказе:</h5>
                    <ul>
                        @foreach (var order in group)
                        {
                            @foreach(var good in Model.GoodsData)
                            {
                                if(good.GoodId==order.GoodId)
                                {
                                    <li>
                                        Наименование товара: @good.Name
                                        <br />
                                        Цена за единицу: @good.Price
                                    </li>
                                }
                            }
                            
                        }
                    </ul>
                </div>
            }
        </div>
        <div id="my-comments" class="tab-content">
            <ul>
                @foreach (var comment in Model.CommentData)
                {
                    if (comment.UserId == Model.UserId)
                    {
                        @foreach (var good in Model.GoodsData)
                        {
                            if (good.GoodId == comment.GoodId)
                            {
                                <li>
                                    <strong>@good.Name</strong>
                                    <p>@comment.DateCreate.ToShortDateString()</p>
                                    <p>@comment.Text</p>
                                </li>
                            }
                        }
                    }
                }
            </ul>
        </div>
    <script>
        const tabs = document.querySelectorAll('.profile-nav a');
        const tabContents = document.querySelectorAll('.tab-content');
        const editDescriptionButton = document.getElementById('edit-description-button');
        const saveDescriptionButton = document.getElementById('save-description-button');
        const descriptionText = document.getElementById('description-text');

        const editDescriptionField = document.getElementById('edit-description');

        tabs.forEach(tab => {
            tab.addEventListener('click', (e) => {
                e.preventDefault();

                // Убираем класс active-tab у текущего активного элемента навигации
                document.querySelector('.profile-nav .active-tab').classList.remove('active-tab');

                const tabId = tab.getAttribute('data-tab');
                tabContents.forEach(content => {
                    content.classList.remove('active');
                });
                document.getElementById(tabId).classList.add('active');

                // Добавляем класс active-tab к элементу, по которому произошел клик
                tab.classList.add('active-tab');
            });
        });

        editDescriptionButton.addEventListener('click', () => {
            descriptionText.style.display = 'none';
            editDescriptionButton.style.display = 'none';
            saveDescriptionButton.style.display = 'inline-block';

            editDescriptionField.value = descriptionText.textContent;
            editDescriptionField.style.display = 'block';
        });

        saveDescriptionButton.addEventListener('click', () => {

            const updatedDescription = editDescriptionField.value;

            fetch(editDescriptionForm.action, {
                method: 'POST',
                body: JSON.stringify({ updatedDescription }),
                headers: {
                    'Content-Type': 'application/json'
                }
            })
                .then(response => response.json())
                .then(data => {
                    descriptionText.textContent = updatedDescription;
                })
            descriptionText.textContent = updatedDescription;
            descriptionText.style.display = 'block';
            editDescriptionField.style.display = 'none';
            editDescriptionButton.style.display = 'inline-block';
            saveDescriptionButton.style.display = 'none';
        });

    </script>

</body>
</html>
